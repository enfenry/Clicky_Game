{"version":3,"sources":["components/Character/index.js","components/NavBar/index.js","components/Header/index.js","App.js","serviceWorker.js","index.js"],"names":["Character","_this","this","react_default","a","createElement","className","id","props","onClick","handleCharacterClick","alt","name","src","image","Component","NavBar","href","guessMessage","score","topScore","Header","App","state","characters","updateGame","Object","toConsumableArray","thisIndex","findIndex","character","newMessage","marked","setState","map","newScore","length","Math","max","shuffledCharacters","shuffleCharacters","shuffle","array","tempVal","randomIndex","currentIndex","floor","random","componentDidMount","_this2","mapCharacters","components_Character","key","components_NavBar","components_Header","React","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.64142e38.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"./style.css\";\r\n\r\nclass Character extends Component {\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"character-card\">\r\n                <button id={this.props.id} className=\"character-button\" onClick={() => this.props.handleCharacterClick(this.props.id)}>\r\n                    <div className=\"img-container\">\r\n                        <img alt={this.props.name} src={this.props.image} />\r\n                    </div>\r\n                </button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Character;","import React, { Component } from \"react\";\r\nimport \"./style.css\";\r\n\r\nclass NavBar extends Component {\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"nav-bar row\">\r\n                <div className=\"col-sm-4 col-md-4 col-lg-4 col-center\">\r\n                    <a href=\"/\">\r\n                        <h5>Remember The Fallen</h5>\r\n                    </a>\r\n                </div>\r\n                <div className=\"col-sm-4 col-md-4 col-lg-4 col-center\">\r\n                    <h5>{this.props.guessMessage}</h5>\r\n                </div>\r\n                <div className=\"col-sm-4 col-md-4 col-lg-4 col-center\">\r\n                    <h5>Score: {this.props.score}  | Top Score: {this.props.topScore} </h5>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default NavBar;","import React, { Component } from \"react\";\r\nimport \"./style.css\";\r\n\r\nclass Header extends Component {\r\n\r\n    render() {\r\n        return (\r\n            <header className=\"header\">\r\n                <div className=\"row-center\">\r\n                    <h2>\"Remember The Fallen\"</h2>\r\n                    <h3>Memory Game</h3>\r\n                    <h6>Click each character only once</h6>\r\n                </div>\r\n            </header>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default Header;\r\n\r\n\r\n\r\n","import React from 'react';\nimport Character from \"./components/Character\";\nimport NavBar from \"./components/NavBar\";\nimport Header from \"./components/Header\";\nimport characters from \"./characters.json\";\nimport './App.css';\n\nclass App extends React.Component {\n\n  state = {\n    characters: characters,\n    guessMessage: \"Click an Image to Begin!\",\n    score: 0,\n    topScore: 0\n  }\n\n  updateGame = (id) => {\n    let characters = [...this.state.characters];\n    const thisIndex = this.state.characters.findIndex(character => character.id === id);\n    let isMarked = characters[thisIndex].marked\n    let newMessage = \"\";\n\n    // if guessed correctly, score will increase and messages will update\n    if (!isMarked) {\n      characters[thisIndex].marked = true;\n      let newScore = this.state.score + 1;\n\n      // if max score achieved, update message\n      if (newScore === characters.length) {\n        newMessage = \"Max score achieved. You win!\";\n      }\n      else {\n        newMessage = \"Correct!\";\n      }\n      this.setState({ score: newScore, topScore: Math.max(newScore, this.state.topScore), guessMessage: newMessage })\n    }\n    // else reset score and update message\n    else {\n      newMessage = \"Sorry! Play again?\";\n      this.setState({ score: 0, guessMessage: newMessage })\n      characters.map(character => {\n        character.marked = false;\n        return character;\n      });\n    }\n    this.setState({ characters: characters });\n    return characters;\n  }\n\n  handleCharacterClick = id => {\n    let shuffledCharacters = this.shuffleCharacters(this.updateGame(id));\n    this.setState({ characters: shuffledCharacters });\n  }\n\n  shuffleCharacters = () => {\n    const shuffledCharacters = this.shuffle(this.state.characters);\n    return shuffledCharacters;\n  }\n\n  shuffle = (array) => {\n    let currentIndex = array.length;\n    let tempVal;\n    let randomIndex;\n\n    while (currentIndex !== 0) {\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex -= 1;\n\n      tempVal = array[currentIndex];\n      array[currentIndex] = array[randomIndex];\n      array[randomIndex] = tempVal;\n    }\n    return array;\n  }\n\n  componentDidMount = () => {\n    this.shuffleCharacters();\n  }\n\n  render() {\n    const mapCharacters =\n      characters.map(character => {\n        return <Character name={character.name} image={character.image} key={character.id} id={character.id} marked={character.marked} handleCharacterClick={this.handleCharacterClick} />\n      })\n\n    return (\n      <div className=\"container-fluid\">\n        <div className=\"container-fluid mask\">\n          <NavBar guessMessage={this.state.guessMessage} score={this.state.score} topScore={this.state.topScore} />\n          <div className=\"row row-center\">\n            <Header />\n          </div>\n            <main className=\"container\">\n              <div className=\"row row-center character-row\">\n                {mapCharacters}\n              </div>\n            </main>\n          </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}